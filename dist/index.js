import InterceptorManager,{isLifeCyclePrototype}from'./core/InterceptorManager';
import {overwriteComponent,overwritePage}from'./core/overwriteMiniLifeCycle';
import {getMiniProgramLifecycles}from'./core/miniLifecycles';
class MiniLifeCycle{create(env){this.env=env;this.init();this.addInterceptors();}init(){const env=this.env;const {pageLifecycles,componentLifecycles}=getMiniProgramLifecycles(env);if(!pageLifecycles&& !componentLifecycles){console.error(`小程序平台: ${this.env}, 没有配置Page、Component的生命周期方法`);this.isInitSuccess=false;return;}this.interceptors=new Proxy({},{get(target,prototypeText){if(isLifeCyclePrototype(env,prototypeText)&& !target[prototypeText]){target[prototypeText]=new InterceptorManager(env,prototypeText);}if(!target[prototypeText]){console.error(`当前小程序运行平台没有此生命周期方法 -> ${prototypeText}`);return {};}return target[prototypeText];}});this.isInitSuccess=true;}addInterceptors(){if(Page&&Component&&this.isInitSuccess){Page=overwritePage.bind(this);Component=overwriteComponent.bind(this);}}constructor(){try{this.originPage=Page;this.originComponent=Component;}catch(e) {console.error('绑定小程序原生方法Page、Component异常:\t',e);}this.env='weapp';this.isInitSuccess=false;}}export default new MiniLifeCycle();
