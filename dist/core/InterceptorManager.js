import {handleToList}from'../utils/index';
import {getMiniProgramLifecycles}from'./miniLifecycles';
export const isLifeCyclePrototype=(env,prototype)=>{const {pageLifecycles,componentLifecycles}=getMiniProgramLifecycles(env);if(pageLifecycles&&Object.hasOwnProperty.call(pageLifecycles,prototype)){return true;}if(componentLifecycles&&Object.hasOwnProperty.call(componentLifecycles,prototype)){return true;}return false;};
class InterceptorManager{use(handles){if(!this.lifeCycleType){return this.errorTip(0);}this.isDestroy=false;this.useHandles=this.useHandles.concat(handleToList(handles));}useAfter(handles){if(!this.lifeCycleType){return this.errorTip(0);}this.isDestroy=false;this.useAfterHandles=this.useAfterHandles.concat(handleToList(handles));}destroy(){this.useHandles=[];this.useAfterHandles=[];this.isDestroy=true;}reset(){this.useHandles=[];this.useAfterHandles=[];this.isDestroy=false;}errorTip(errorType){if(errorType===0){console.error('暂不支持小程序自带的生命周期之外的钩子');}else if(errorType===1){console.error(`小程序平台: ${this.env}, 没有配置Page、Component的生命周期方法`);}}constructor(env,lifeCycleType){this.useHandles=[];this.useAfterHandles=[];this.isDestroy=false;this.env=env;const {pageLifecycles,componentLifecycles}=getMiniProgramLifecycles(env);if(!pageLifecycles&& !componentLifecycles){this.wrapperType=null;this.lifeCycleType=null;this.errorTip(1);return;}if(Object.hasOwnProperty.call(pageLifecycles,lifeCycleType)){this.wrapperType='Page';this.lifeCycleType=lifeCycleType;return;}if(Object.hasOwnProperty.call(componentLifecycles,lifeCycleType)){this.wrapperType='Component';this.lifeCycleType=lifeCycleType;return;}this.wrapperType=null;this.lifeCycleType=null;}}export{InterceptorManager as default};
